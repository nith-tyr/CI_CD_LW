name: Docker Image CI

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "development" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/maven-3-jdk-11@master
      env:
          SNYK_TOKEN: ${{ secrets.SYNK_SECRET_ACCESS_KEY}}
      with:
          command: monitor
    - name: build
  pipeline-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download the Pipeline Scanner
        uses: wei/curl@master
        with:
          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
      - name: Unzip the Pipeline Scanner
        run: unzip pipeline-scan-LATEST.zip
      - name: Run Pipeline Scanner
        run: java -Dpipeline.debug=true -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "example.jar" --fail_on_severity="Very High, High"
      - name: Login to AWS ECR
        run: |
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESSKEY }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRETACCESSKEY }}
            aws configure set region ${{ secrets.AWS_REGION }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNTID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      - name: Get Git SHA
        run: |
           export GIT_SHA=$(git rev-parse --short HEAD)
        echo "Git SHA: $GIT_SHA"
     - name: Build the Docker image
        run: docker build . -t 966736819776.dkr.ecr.us-east-1.amazonaws.com/tsbpoc

    - name: Push Docker image to AWS ECR
      run: docker push 966736819776.dkr.ecr.us-east-1.amazonaws.com/tsbpoc:latest

    - name: Qualys Scanning
      run: | 
      env:
        QUALYS_API_TOKEN: ${{ secrets.QUALYS_API_TOKEN }}
    # run: |
    #    oc login --server=<OpenShift Server URL> --token=${{ secrets.OPENSHIFT_API_TOKEN }}
    #    oc project <OpenShift Project Name>
    #    oc set image deployment/<Deployment Name> <Container Name>=sureshsss/java-docker-build-tutorial:${GITHUB_RUN_ID}
