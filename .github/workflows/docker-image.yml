name: Docker Image CI

on:
  push:
    branches: [ "development" ]
  pull_request:
    branches: [ "development" ]
jobs:
  build:
    runs-on: self-hosted
    steps:
    - uses: AutoModality/action-clean@v1
    - uses: actions/checkout@v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    - name: Run Snyk to check for vulnerabilities
      uses: actions/checkout@master
      env:
          SNYK_TOKEN: ${{ secrets.SYNK_SECRET_ACCESS_KEY}}
      with:
          command: monitor
      continue-on-error: true
    - uses: toko-bifrost/ms-teams-deploy-card@master
      if: always()
      with:
        github-token: ${{ github.token }}
        webhook-uri: ${{ secrets.MICROSOFT_TEAMS_WEBHOOK_URI }}

    # notify Microsoft Teams channel with a custom message
    - uses: aliencube/microsoft-teams-actions@v0.8.0
      with:
        webhook_uri: ${{ secrets.MICROSOFT_TEAMS_WEBHOOK_URI }}
        title: This is a custom message
        summary: This is a message summary
      
    - name: Install kubectl
      uses: azure/setup-kubectl@v2.0
      with:
        version: 'v1.28.0' # default is latest stable
      id: install
      
    #- name: build
     # run: |
      #  sudo chmod -R 777 target
       # mvn clean package
    #- name: Set up JDK 1.8
     # uses: actions/setup-java@v1
      #with:
       # java-version: 1.8

  #  - name: Veracode Upload And Scan
  #    uses: veracode/veracode-uploadandscan-action@0.2.6
  #    with:
  #        appname: 'java-docker-build-1.0.0-SNAPSHOT'
  #        createprofile: false
  #        filepath: '/github/workspace/target/java-docker-build-1.0.0-SNAPSHOT.jar'
  #        vid: '${{ secrets.VC_KEY }}'
  #        vkey: '${{ secrets.VC_SECRET }}'  
          
    - name: Login to AWS ECR
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESSKEY }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRETACCESSKEY }}
        aws configure set region ${{ secrets.AWS_REGION }}
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNTID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        
    - name: Get Git SHA
      id: git_sha
      run: |
        echo "::set-output name=sha::$(git rev-parse --short HEAD)"
      shell: bash
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build the Docker image
      run: docker build . -t 966736819776.dkr.ecr.us-east-1.amazonaws.com/tsbpoc:$(git rev-parse --short HEAD)

    - name: Push Docker image to AWS ECR
      run: docker push 966736819776.dkr.ecr.us-east-1.amazonaws.com/tsbpoc:$(git rev-parse --short HEAD)
      
    - name: Set up kubeconfig
      run: |
         aws eks update-kubeconfig --region us-east-1 --name tsbpoc1
         cat /etc/passwd 
      env:
         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESSKEY }}
         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRETACCESSKEY }}

  #  - name: Debug Kubeconfig
  #    run: |
  #      cat $HOME/.kube/config
  #      kubectl get nodes
    - name: Debug Kubeconfig
      run: ls -l /home/ubuntu/actions-runner/_work/CI-CD-Pipeline/CI-CD-Pipeline
    - name: Update Deployment YAML
      run: |
        TAG="${{ steps.git_sha.outputs.sha }}"
        sudo sed -i 's/latest/${{ steps.git_sha.outputs.sha }}/' '/home/ubuntu/actions-runner/_work/CI-CD-Pipeline/CI-CD-Pipeline/deployment.yaml'
        cat /home/ubuntu/actions-runner/_work/CI-CD-Pipeline/CI-CD-Pipeline/deployment.yaml
        
   # - name: Qualys Scanning
  #    run: | 
   #   env:
    #    QUALYS_API_TOKEN: ${{ secrets.QUALYS_API_TOKEN }}
    #- name: Debug
     # run: |
       # kubectl config current-context
        #kubectl get svc

    - name: AWS EKS with Kubectl
      uses: giovannirossini/aws-eks@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESSKEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRETACCESSKEY }}
        aws-region: us-east-1
        cluster-name: tsbpoc1
        command: kubectl apply -f deployment.yaml  
        
  #  - uses: lacework/lw-scanner-action@v1.4.0
  #    name: Scan container image for vulnerabilities using Lacework
  #    with:
  #        LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }}
  #        LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
  #        IMAGE_NAME: 966736819776.dkr.ecr.us-east-1.amazonaws.com/tsbpoc
  #        IMAGE_TAG: "${{ steps.git_sha.outputs.sha }}"
  #        SAVE_RESULTS_IN_LACEWORK: true
  #        SAVE_BUILD_REPORT: true
  #        BUILD_REPORT_FILE_NAME: myreport.html
  #        DEBUGGING : true
  #        RESULTS_IN_GITHUB_SUMMARY	: true 
    #- name: Verify LW Account Details
    #  shell: bash
   #   run: echo -e "LW_ACCOUNT_NAME:$(echo ${{secrets.LW_ACCOUNT_NAME}} | sed 's/^\(...\)\(.*\)\(...\)$/\1****\3/')\nLW_ACCESS_TOKEN:$(echo ${{secrets.LW_ACCESS_TOKEN}} | sed 's/^\(...\)\(.*\)\(...\)$/\1****\3/')"
    - name: Scan container images for vulnerabitilies using Lacework
      uses: lacework/lw-scanner-action@v1.4.0
      with:
          LW_ACCOUNT_NAME: ${{ secrets.LW_ACCOUNT_NAME }} 
          LW_ACCESS_TOKEN: ${{ secrets.LW_ACCESS_TOKEN }}
          #lw-scanner config auth: true
          image_name: 966736819776.dkr.ecr.us-east-1.amazonaws.com/tsbpoc
          image_tag: "${{ steps.git_sha.outputs.sha }}"
          SAVE_RESULTS_IN_LACEWORK: true
          SAVE_BUILD_REPORT: true
          BUILD_REPORT_FILE_NAME: report.html
       # DEBUGGING: true
          RESULTS_IN_GITHUB_SUMMARY: true
          SCAN_LIBRARY_PACKAGES: true

    
    
      


